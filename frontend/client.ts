// Code generated by the Encore 1.50.6 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly blockchain: blockchain.ServiceClient
    public readonly docs: docs.ServiceClient
    public readonly temple: temple.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.blockchain = new blockchain.ServiceClient(base)
        this.docs = new docs.ServiceClient(base)
        this.temple = new temple.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    activateProtocol as api_blockchain_activation_activateProtocol,
    getProtocolStatus as api_blockchain_activation_getProtocolStatus,
    masterActivation as api_blockchain_activation_masterActivation
} from "~backend/blockchain/activation";
import {
    addLiquidity as api_blockchain_amm_addLiquidity,
    claimRewards as api_blockchain_amm_claimRewards,
    executeFlashLoan as api_blockchain_amm_executeFlashLoan,
    executeSwap as api_blockchain_amm_executeSwap,
    getLiquidityPools as api_blockchain_amm_getLiquidityPools,
    getSwapQuote as api_blockchain_amm_getSwapQuote,
    getUserLiquidityPositions as api_blockchain_amm_getUserLiquidityPositions,
    getUserStakingPositions as api_blockchain_amm_getUserStakingPositions,
    getYieldFarms as api_blockchain_amm_getYieldFarms,
    stakeLPTokens as api_blockchain_amm_stakeLPTokens,
    unstakeLPTokens as api_blockchain_amm_unstakeLPTokens
} from "~backend/blockchain/amm";
import {
    getBridgeAnalytics as api_blockchain_analytics_getBridgeAnalytics,
    getFlashLoanAnalytics as api_blockchain_analytics_getFlashLoanAnalytics,
    getProtocolAnalytics as api_blockchain_analytics_getProtocolAnalytics,
    getSystemHealthMetrics as api_blockchain_analytics_getSystemHealthMetrics
} from "~backend/blockchain/analytics";
import {
    getBridgeTransferStatus as api_blockchain_bridge_getBridgeTransferStatus,
    getUserBridgeTransfers as api_blockchain_bridge_getUserBridgeTransfers,
    initiateBridgeTransfer as api_blockchain_bridge_initiateBridgeTransfer,
    signBridgeTransfer as api_blockchain_bridge_signBridgeTransfer
} from "~backend/blockchain/bridge";
import {
    deployAssimilatorToken as api_blockchain_contracts_deployAssimilatorToken,
    deployVQCInfrastructure as api_blockchain_contracts_deployVQCInfrastructure,
    getContractDetails as api_blockchain_contracts_getContractDetails,
    listContracts as api_blockchain_contracts_listContracts
} from "~backend/blockchain/contracts";
import {
    buyTokens as api_blockchain_currency_exchange_buyTokens,
    createWallet as api_blockchain_currency_exchange_createWallet,
    getExchangeRates as api_blockchain_currency_exchange_getExchangeRates,
    getTransactionHistory as api_blockchain_currency_exchange_getTransactionHistory,
    getUserBalances as api_blockchain_currency_exchange_getUserBalances,
    sellTokens as api_blockchain_currency_exchange_sellTokens
} from "~backend/blockchain/currency_exchange";
import { seedBlockchainData as api_blockchain_data_seeder_seedBlockchainData } from "~backend/blockchain/data_seeder";
import {
    getBlockDetails as api_blockchain_explorer_getBlockDetails,
    getLatestBlocks as api_blockchain_explorer_getLatestBlocks,
    getLatestTransactions as api_blockchain_explorer_getLatestTransactions,
    getNetworkStats as api_blockchain_explorer_getNetworkStats,
    search as api_blockchain_explorer_search
} from "~backend/blockchain/explorer";
import {
    advancedSearch as api_blockchain_explorer_enhanced_advancedSearch,
    getAutocompleteSuggestions as api_blockchain_explorer_enhanced_getAutocompleteSuggestions,
    getSearchHistory as api_blockchain_explorer_enhanced_getSearchHistory,
    getTransactionAnalytics as api_blockchain_explorer_enhanced_getTransactionAnalytics
} from "~backend/blockchain/explorer_enhanced";
import {
    castVote as api_blockchain_governance_castVote,
    createProposal as api_blockchain_governance_createProposal,
    listProposals as api_blockchain_governance_listProposals
} from "~backend/blockchain/governance";
import {
    getPerformanceMetrics as api_blockchain_health_getPerformanceMetrics,
    getSystemHealth as api_blockchain_health_getSystemHealth
} from "~backend/blockchain/health";
import {
    buyNFT as api_blockchain_marketplace_buyNFT,
    getNFTListings as api_blockchain_marketplace_getNFTListings,
    getUserNFTs as api_blockchain_marketplace_getUserNFTs,
    listNFT as api_blockchain_marketplace_listNFT
} from "~backend/blockchain/marketplace";
import {
    generateTransactionQRCode as api_blockchain_mobile_generateTransactionQRCode,
    getMobileTransactionHistory as api_blockchain_mobile_getMobileTransactionHistory,
    registerForPushNotifications as api_blockchain_mobile_registerForPushNotifications,
    registerWalletKeys as api_blockchain_mobile_registerWalletKeys,
    validateQRCode as api_blockchain_mobile_validateQRCode
} from "~backend/blockchain/mobile";
import {
    getChainInfo as api_blockchain_network_getChainInfo,
    getNetworkStatus as api_blockchain_network_getNetworkStatus,
    getPeers as api_blockchain_network_getPeers,
    getValidators as api_blockchain_network_getValidators
} from "~backend/blockchain/network";
import {
    blockchainMonitorStream as api_blockchain_websocket_blockchainMonitorStream,
    getConnectedClients as api_blockchain_websocket_getConnectedClients
} from "~backend/blockchain/websocket";

export namespace blockchain {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.activateProtocol = this.activateProtocol.bind(this)
            this.addLiquidity = this.addLiquidity.bind(this)
            this.advancedSearch = this.advancedSearch.bind(this)
            this.blockchainMonitorStream = this.blockchainMonitorStream.bind(this)
            this.buyNFT = this.buyNFT.bind(this)
            this.buyTokens = this.buyTokens.bind(this)
            this.castVote = this.castVote.bind(this)
            this.claimRewards = this.claimRewards.bind(this)
            this.createProposal = this.createProposal.bind(this)
            this.createWallet = this.createWallet.bind(this)
            this.deployAssimilatorToken = this.deployAssimilatorToken.bind(this)
            this.deployVQCInfrastructure = this.deployVQCInfrastructure.bind(this)
            this.executeFlashLoan = this.executeFlashLoan.bind(this)
            this.executeSwap = this.executeSwap.bind(this)
            this.generateTransactionQRCode = this.generateTransactionQRCode.bind(this)
            this.getAutocompleteSuggestions = this.getAutocompleteSuggestions.bind(this)
            this.getBlockDetails = this.getBlockDetails.bind(this)
            this.getBridgeAnalytics = this.getBridgeAnalytics.bind(this)
            this.getBridgeTransferStatus = this.getBridgeTransferStatus.bind(this)
            this.getChainInfo = this.getChainInfo.bind(this)
            this.getConnectedClients = this.getConnectedClients.bind(this)
            this.getContractDetails = this.getContractDetails.bind(this)
            this.getExchangeRates = this.getExchangeRates.bind(this)
            this.getFlashLoanAnalytics = this.getFlashLoanAnalytics.bind(this)
            this.getLatestBlocks = this.getLatestBlocks.bind(this)
            this.getLatestTransactions = this.getLatestTransactions.bind(this)
            this.getLiquidityPools = this.getLiquidityPools.bind(this)
            this.getMobileTransactionHistory = this.getMobileTransactionHistory.bind(this)
            this.getNFTListings = this.getNFTListings.bind(this)
            this.getNetworkStats = this.getNetworkStats.bind(this)
            this.getNetworkStatus = this.getNetworkStatus.bind(this)
            this.getPeers = this.getPeers.bind(this)
            this.getPerformanceMetrics = this.getPerformanceMetrics.bind(this)
            this.getProtocolAnalytics = this.getProtocolAnalytics.bind(this)
            this.getProtocolStatus = this.getProtocolStatus.bind(this)
            this.getSearchHistory = this.getSearchHistory.bind(this)
            this.getSwapQuote = this.getSwapQuote.bind(this)
            this.getSystemHealth = this.getSystemHealth.bind(this)
            this.getSystemHealthMetrics = this.getSystemHealthMetrics.bind(this)
            this.getTransactionAnalytics = this.getTransactionAnalytics.bind(this)
            this.getTransactionHistory = this.getTransactionHistory.bind(this)
            this.getUserBalances = this.getUserBalances.bind(this)
            this.getUserBridgeTransfers = this.getUserBridgeTransfers.bind(this)
            this.getUserLiquidityPositions = this.getUserLiquidityPositions.bind(this)
            this.getUserNFTs = this.getUserNFTs.bind(this)
            this.getUserStakingPositions = this.getUserStakingPositions.bind(this)
            this.getValidators = this.getValidators.bind(this)
            this.getYieldFarms = this.getYieldFarms.bind(this)
            this.initiateBridgeTransfer = this.initiateBridgeTransfer.bind(this)
            this.listContracts = this.listContracts.bind(this)
            this.listNFT = this.listNFT.bind(this)
            this.listProposals = this.listProposals.bind(this)
            this.masterActivation = this.masterActivation.bind(this)
            this.registerForPushNotifications = this.registerForPushNotifications.bind(this)
            this.registerWalletKeys = this.registerWalletKeys.bind(this)
            this.search = this.search.bind(this)
            this.seedBlockchainData = this.seedBlockchainData.bind(this)
            this.sellTokens = this.sellTokens.bind(this)
            this.signBridgeTransfer = this.signBridgeTransfer.bind(this)
            this.stakeLPTokens = this.stakeLPTokens.bind(this)
            this.unstakeLPTokens = this.unstakeLPTokens.bind(this)
            this.validateQRCode = this.validateQRCode.bind(this)
        }

        public async activateProtocol(params: RequestType<typeof api_blockchain_activation_activateProtocol>): Promise<ResponseType<typeof api_blockchain_activation_activateProtocol>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/activation/activate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_activation_activateProtocol>
        }

        /**
         * Add liquidity to pool
         */
        public async addLiquidity(params: RequestType<typeof api_blockchain_amm_addLiquidity>): Promise<ResponseType<typeof api_blockchain_amm_addLiquidity>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/add-liquidity`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_addLiquidity>
        }

        /**
         * Advanced search with filtering and pagination
         */
        public async advancedSearch(params: RequestType<typeof api_blockchain_explorer_enhanced_advancedSearch>): Promise<ResponseType<typeof api_blockchain_explorer_enhanced_advancedSearch>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/search/advanced`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_enhanced_advancedSearch>
        }

        /**
         * Real-time blockchain monitoring stream
         */
        public async blockchainMonitorStream(params: RequestType<typeof api_blockchain_websocket_blockchainMonitorStream>): Promise<StreamIn<StreamResponse<typeof api_blockchain_websocket_blockchainMonitorStream>>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                clientId:      params.clientId,
                filters:       params.filters === undefined ? undefined : String(params.filters),
                subscriptions: params.subscriptions.map((v) => v),
            })

            return await this.baseClient.createStreamIn(`/blockchain/monitor`, {query})
        }

        /**
         * Buys an NFT from the marketplace.
         */
        public async buyNFT(params: RequestType<typeof api_blockchain_marketplace_buyNFT>): Promise<ResponseType<typeof api_blockchain_marketplace_buyNFT>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/buy`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_marketplace_buyNFT>
        }

        /**
         * Allows users to buy ASM tokens with USD.
         */
        public async buyTokens(params: RequestType<typeof api_blockchain_currency_exchange_buyTokens>): Promise<ResponseType<typeof api_blockchain_currency_exchange_buyTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/buy`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_buyTokens>
        }

        /**
         * Casts a vote on a proposal.
         */
        public async castVote(params: RequestType<typeof api_blockchain_governance_castVote>): Promise<ResponseType<typeof api_blockchain_governance_castVote>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/governance/vote`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_governance_castVote>
        }

        /**
         * Claim farming rewards
         */
        public async claimRewards(params: RequestType<typeof api_blockchain_amm_claimRewards>): Promise<ResponseType<typeof api_blockchain_amm_claimRewards>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/claim-rewards`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_claimRewards>
        }

        /**
         * Creates a new governance proposal.
         */
        public async createProposal(params: RequestType<typeof api_blockchain_governance_createProposal>): Promise<ResponseType<typeof api_blockchain_governance_createProposal>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/governance/proposals`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_governance_createProposal>
        }

        /**
         * Creates a new wallet for a user.
         */
        public async createWallet(params: RequestType<typeof api_blockchain_currency_exchange_createWallet>): Promise<ResponseType<typeof api_blockchain_currency_exchange_createWallet>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/wallet`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_createWallet>
        }

        /**
         * Deploys the Assimilator native token with 28 trillion supply.
         */
        public async deployAssimilatorToken(): Promise<ResponseType<typeof api_blockchain_contracts_deployAssimilatorToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/deploy-assimilator`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_contracts_deployAssimilatorToken>
        }

        /**
         * Deploys the VQC Temple infrastructure as smart contracts.
         */
        public async deployVQCInfrastructure(): Promise<ResponseType<typeof api_blockchain_contracts_deployVQCInfrastructure>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/deploy-vqc`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_contracts_deployVQCInfrastructure>
        }

        /**
         * Allows users to take out a flash loan for arbitrage.
         */
        public async executeFlashLoan(params: RequestType<typeof api_blockchain_amm_executeFlashLoan>): Promise<ResponseType<typeof api_blockchain_amm_executeFlashLoan>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/flash-loan`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_executeFlashLoan>
        }

        /**
         * Execute swap
         */
        public async executeSwap(params: RequestType<typeof api_blockchain_amm_executeSwap>): Promise<ResponseType<typeof api_blockchain_amm_executeSwap>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/swap`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_executeSwap>
        }

        public async generateTransactionQRCode(params: RequestType<typeof api_blockchain_mobile_generateTransactionQRCode>): Promise<ResponseType<typeof api_blockchain_mobile_generateTransactionQRCode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/mobile/qr-code`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_mobile_generateTransactionQRCode>
        }

        /**
         * Autocomplete suggestions
         */
        public async getAutocompleteSuggestions(params: RequestType<typeof api_blockchain_explorer_enhanced_getAutocompleteSuggestions>): Promise<ResponseType<typeof api_blockchain_explorer_enhanced_getAutocompleteSuggestions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                query: params.query,
                type:  String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/autocomplete`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_enhanced_getAutocompleteSuggestions>
        }

        /**
         * Retrieves detailed information about a specific block.
         */
        public async getBlockDetails(params: { blockNumber: string }): Promise<ResponseType<typeof api_blockchain_explorer_getBlockDetails>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/block/${encodeURIComponent(params.blockNumber)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_getBlockDetails>
        }

        public async getBridgeAnalytics(): Promise<ResponseType<typeof api_blockchain_analytics_getBridgeAnalytics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/bridge`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_analytics_getBridgeAnalytics>
        }

        /**
         * Gets the status of a bridge transfer.
         */
        public async getBridgeTransferStatus(params: { transferId: number }): Promise<ResponseType<typeof api_blockchain_bridge_getBridgeTransferStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bridge/status/${encodeURIComponent(params.transferId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_bridge_getBridgeTransferStatus>
        }

        /**
         * Retrieves VQC blockchain configuration and parameters.
         */
        public async getChainInfo(): Promise<ResponseType<typeof api_blockchain_network_getChainInfo>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/network/chain-info`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_network_getChainInfo>
        }

        /**
         * Get connected clients count
         */
        public async getConnectedClients(): Promise<ResponseType<typeof api_blockchain_websocket_getConnectedClients>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/monitor/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_websocket_getConnectedClients>
        }

        /**
         * Retrieves detailed information about a specific contract.
         */
        public async getContractDetails(params: { address: string }): Promise<ResponseType<typeof api_blockchain_contracts_getContractDetails>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts/${encodeURIComponent(params.address)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_contracts_getContractDetails>
        }

        /**
         * Retrieves current exchange rates for all supported currency pairs.
         */
        public async getExchangeRates(): Promise<ResponseType<typeof api_blockchain_currency_exchange_getExchangeRates>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/rates`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_getExchangeRates>
        }

        public async getFlashLoanAnalytics(): Promise<ResponseType<typeof api_blockchain_analytics_getFlashLoanAnalytics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/flash-loans`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_analytics_getFlashLoanAnalytics>
        }

        /**
         * Retrieves the latest blocks from the VQC blockchain.
         */
        public async getLatestBlocks(): Promise<ResponseType<typeof api_blockchain_explorer_getLatestBlocks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/blocks`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_getLatestBlocks>
        }

        /**
         * Retrieves the latest transactions from the VQC blockchain.
         */
        public async getLatestTransactions(): Promise<ResponseType<typeof api_blockchain_explorer_getLatestTransactions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/transactions`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_getLatestTransactions>
        }

        /**
         * Get all liquidity pools
         */
        public async getLiquidityPools(): Promise<ResponseType<typeof api_blockchain_amm_getLiquidityPools>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/pools`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_getLiquidityPools>
        }

        public async getMobileTransactionHistory(params: RequestType<typeof api_blockchain_mobile_getMobileTransactionHistory>): Promise<ResponseType<typeof api_blockchain_mobile_getMobileTransactionHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/mobile/transactions/${encodeURIComponent(params.userId)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_mobile_getMobileTransactionHistory>
        }

        /**
         * Gets all active NFT listings.
         */
        public async getNFTListings(): Promise<ResponseType<typeof api_blockchain_marketplace_getNFTListings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/listings`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_marketplace_getNFTListings>
        }

        /**
         * Retrieves network statistics for the VQC blockchain.
         */
        public async getNetworkStats(): Promise<ResponseType<typeof api_blockchain_explorer_getNetworkStats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_getNetworkStats>
        }

        /**
         * Retrieves comprehensive VQC network status and health metrics.
         */
        public async getNetworkStatus(): Promise<ResponseType<typeof api_blockchain_network_getNetworkStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/network/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_network_getNetworkStatus>
        }

        /**
         * Retrieves information about network peers.
         */
        public async getPeers(): Promise<ResponseType<typeof api_blockchain_network_getPeers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/network/peers`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_network_getPeers>
        }

        /**
         * Performance metrics endpoint
         */
        public async getPerformanceMetrics(): Promise<ResponseType<typeof api_blockchain_health_getPerformanceMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/metrics/performance`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_health_getPerformanceMetrics>
        }

        public async getProtocolAnalytics(params: RequestType<typeof api_blockchain_analytics_getProtocolAnalytics>): Promise<ResponseType<typeof api_blockchain_analytics_getProtocolAnalytics>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                protocolName: params.protocolName,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/protocols`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_analytics_getProtocolAnalytics>
        }

        public async getProtocolStatus(params: RequestType<typeof api_blockchain_activation_getProtocolStatus>): Promise<ResponseType<typeof api_blockchain_activation_getProtocolStatus>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                protocolName: params.protocolName,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/activation/status`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_activation_getProtocolStatus>
        }

        /**
         * Get search history
         */
        public async getSearchHistory(): Promise<ResponseType<typeof api_blockchain_explorer_enhanced_getSearchHistory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/search/history`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_enhanced_getSearchHistory>
        }

        /**
         * Get swap quote
         */
        public async getSwapQuote(params: RequestType<typeof api_blockchain_amm_getSwapQuote>): Promise<ResponseType<typeof api_blockchain_amm_getSwapQuote>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                amountIn: params.amountIn,
                tokenIn:  params.tokenIn,
                tokenOut: params.tokenOut,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/quote`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_getSwapQuote>
        }

        /**
         * Health check endpoint
         */
        public async getSystemHealth(): Promise<ResponseType<typeof api_blockchain_health_getSystemHealth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_health_getSystemHealth>
        }

        public async getSystemHealthMetrics(): Promise<ResponseType<typeof api_blockchain_analytics_getSystemHealthMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_analytics_getSystemHealthMetrics>
        }

        /**
         * Transaction analytics
         */
        public async getTransactionAnalytics(params: RequestType<typeof api_blockchain_explorer_enhanced_getTransactionAnalytics>): Promise<ResponseType<typeof api_blockchain_explorer_enhanced_getTransactionAnalytics>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                timeRange: String(params.timeRange),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/analytics/transactions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_enhanced_getTransactionAnalytics>
        }

        /**
         * Retrieves transaction history for a user.
         */
        public async getTransactionHistory(params: RequestType<typeof api_blockchain_currency_exchange_getTransactionHistory>): Promise<ResponseType<typeof api_blockchain_currency_exchange_getTransactionHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/history/${encodeURIComponent(params.userId)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_getTransactionHistory>
        }

        /**
         * Retrieves user balances for all currencies.
         */
        public async getUserBalances(params: { userId: string }): Promise<ResponseType<typeof api_blockchain_currency_exchange_getUserBalances>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/balances/${encodeURIComponent(params.userId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_getUserBalances>
        }

        /**
         * Gets user's bridge transfers.
         */
        public async getUserBridgeTransfers(params: { userId: string }): Promise<ResponseType<typeof api_blockchain_bridge_getUserBridgeTransfers>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bridge/transfers/${encodeURIComponent(params.userId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_bridge_getUserBridgeTransfers>
        }

        /**
         * Get user's liquidity positions
         */
        public async getUserLiquidityPositions(params: { userId: string }): Promise<ResponseType<typeof api_blockchain_amm_getUserLiquidityPositions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/positions/${encodeURIComponent(params.userId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_getUserLiquidityPositions>
        }

        /**
         * Gets NFTs owned by a user.
         */
        public async getUserNFTs(params: { userId: string }): Promise<ResponseType<typeof api_blockchain_marketplace_getUserNFTs>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/nfts/${encodeURIComponent(params.userId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_marketplace_getUserNFTs>
        }

        /**
         * Get user's staking positions
         */
        public async getUserStakingPositions(params: { userId: string }): Promise<ResponseType<typeof api_blockchain_amm_getUserStakingPositions>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/staking-positions/${encodeURIComponent(params.userId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_getUserStakingPositions>
        }

        /**
         * Retrieves information about network validators.
         */
        public async getValidators(): Promise<ResponseType<typeof api_blockchain_network_getValidators>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/network/validators`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_network_getValidators>
        }

        /**
         * Get yield farming pools
         */
        public async getYieldFarms(): Promise<ResponseType<typeof api_blockchain_amm_getYieldFarms>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/farms`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_getYieldFarms>
        }

        /**
         * Initiates a cross-chain token transfer.
         */
        public async initiateBridgeTransfer(params: RequestType<typeof api_blockchain_bridge_initiateBridgeTransfer>): Promise<ResponseType<typeof api_blockchain_bridge_initiateBridgeTransfer>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bridge/initiate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_bridge_initiateBridgeTransfer>
        }

        /**
         * Retrieves all deployed smart contracts.
         */
        public async listContracts(): Promise<ResponseType<typeof api_blockchain_contracts_listContracts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contracts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_contracts_listContracts>
        }

        /**
         * Lists an NFT for sale on the marketplace.
         */
        public async listNFT(params: RequestType<typeof api_blockchain_marketplace_listNFT>): Promise<ResponseType<typeof api_blockchain_marketplace_listNFT>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/list`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_marketplace_listNFT>
        }

        /**
         * Lists all governance proposals.
         */
        public async listProposals(): Promise<ResponseType<typeof api_blockchain_governance_listProposals>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/governance/proposals`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_governance_listProposals>
        }

        public async masterActivation(params: RequestType<typeof api_blockchain_activation_masterActivation>): Promise<ResponseType<typeof api_blockchain_activation_masterActivation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/activation/master`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_activation_masterActivation>
        }

        public async registerForPushNotifications(params: RequestType<typeof api_blockchain_mobile_registerForPushNotifications>): Promise<ResponseType<typeof api_blockchain_mobile_registerForPushNotifications>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/mobile/register-push`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_mobile_registerForPushNotifications>
        }

        public async registerWalletKeys(params: RequestType<typeof api_blockchain_mobile_registerWalletKeys>): Promise<ResponseType<typeof api_blockchain_mobile_registerWalletKeys>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/mobile/register-keys`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_mobile_registerWalletKeys>
        }

        /**
         * Searches the blockchain for blocks, transactions, addresses, or contracts.
         */
        public async search(params: RequestType<typeof api_blockchain_explorer_search>): Promise<ResponseType<typeof api_blockchain_explorer_search>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                query: params.query,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/explorer/search`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_explorer_search>
        }

        public async seedBlockchainData(): Promise<ResponseType<typeof api_blockchain_data_seeder_seedBlockchainData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/seed-blockchain`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_data_seeder_seedBlockchainData>
        }

        /**
         * Allows users to sell ASM tokens for USD.
         */
        public async sellTokens(params: RequestType<typeof api_blockchain_currency_exchange_sellTokens>): Promise<ResponseType<typeof api_blockchain_currency_exchange_sellTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/exchange/sell`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_currency_exchange_sellTokens>
        }

        /**
         * Signs a multi-signature bridge transfer.
         */
        public async signBridgeTransfer(params: RequestType<typeof api_blockchain_bridge_signBridgeTransfer>): Promise<ResponseType<typeof api_blockchain_bridge_signBridgeTransfer>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/bridge/sign`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_bridge_signBridgeTransfer>
        }

        /**
         * Stake LP tokens into a yield farm
         */
        public async stakeLPTokens(params: RequestType<typeof api_blockchain_amm_stakeLPTokens>): Promise<ResponseType<typeof api_blockchain_amm_stakeLPTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/stake`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_stakeLPTokens>
        }

        /**
         * Unstake LP tokens from a yield farm
         */
        public async unstakeLPTokens(params: RequestType<typeof api_blockchain_amm_unstakeLPTokens>): Promise<ResponseType<typeof api_blockchain_amm_unstakeLPTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/amm/unstake`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_amm_unstakeLPTokens>
        }

        public async validateQRCode(params: { qrCodeId: string }): Promise<ResponseType<typeof api_blockchain_mobile_validateQRCode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/mobile/qr-validate/${encodeURIComponent(params.qrCodeId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_blockchain_mobile_validateQRCode>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getOpenAPISpec as api_docs_api_docs_getOpenAPISpec,
    getSwaggerUI as api_docs_api_docs_getSwaggerUI
} from "~backend/docs/api_docs";

export namespace docs {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getOpenAPISpec = this.getOpenAPISpec.bind(this)
            this.getSwaggerUI = this.getSwaggerUI.bind(this)
        }

        /**
         * OpenAPI/Swagger documentation endpoint
         */
        public async getOpenAPISpec(): Promise<ResponseType<typeof api_docs_api_docs_getOpenAPISpec>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/api/docs/openapi.json`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_docs_api_docs_getOpenAPISpec>
        }

        /**
         * Swagger UI endpoint
         */
        public async getSwaggerUI(): Promise<ResponseType<typeof api_docs_api_docs_getSwaggerUI>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/api/docs`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_docs_api_docs_getSwaggerUI>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    activateToken as api_temple_activation_activateToken,
    createActivationToken as api_temple_activation_createActivationToken,
    listActivationTokens as api_temple_activation_listActivationTokens
} from "~backend/temple/activation";
import {
    createAttestation as api_temple_attestation_createAttestation,
    listAttestations as api_temple_attestation_listAttestations,
    verifyAttestation as api_temple_attestation_verifyAttestation
} from "~backend/temple/attestation";
import {
    getBlockchainStatus as api_temple_blockchain_getBlockchainStatus,
    publishAttestation as api_temple_blockchain_publishAttestation,
    verifyBlockchainRecord as api_temple_blockchain_verifyBlockchainRecord
} from "~backend/temple/blockchain";
import {
    generateArtifact as api_temple_ceremonial_generateArtifact,
    listArtifacts as api_temple_ceremonial_listArtifacts,
    mintArtifactAsNFT as api_temple_ceremonial_mintArtifactAsNFT
} from "~backend/temple/ceremonial";
import { seedTempleData as api_temple_data_seeder_seedTempleData } from "~backend/temple/data_seeder";
import {
    createHarmonics as api_temple_harmonics_createHarmonics,
    getHarmonics as api_temple_harmonics_getHarmonics
} from "~backend/temple/harmonics";
import {
    getQuantumLedgerEntries as api_temple_ledger_getQuantumLedgerEntries,
    getQuantumLedgerEntry as api_temple_ledger_getQuantumLedgerEntry
} from "~backend/temple/ledger";
import {
    getCurrentSystemMetrics as api_temple_system_monitor_getCurrentSystemMetrics,
    startSystemMonitoring as api_temple_system_monitor_startSystemMonitoring,
    stopSystemMonitoring as api_temple_system_monitor_stopSystemMonitoring
} from "~backend/temple/system_monitor";
import {
    createVQCMetrics as api_temple_vqc_metrics_createVQCMetrics,
    getVQCMetrics as api_temple_vqc_metrics_getVQCMetrics
} from "~backend/temple/vqc_metrics";
import {
    connectVQCNode as api_temple_vqc_network_connectVQCNode,
    getVQCNetworkStatus as api_temple_vqc_network_getVQCNetworkStatus,
    initializeQuantumState as api_temple_vqc_network_initializeQuantumState,
    synchronizeVQCNetwork as api_temple_vqc_network_synchronizeVQCNetwork
} from "~backend/temple/vqc_network";
import { vqcDashboardStream as api_temple_websocket_vqcDashboardStream } from "~backend/temple/websocket";

export namespace temple {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.activateToken = this.activateToken.bind(this)
            this.connectVQCNode = this.connectVQCNode.bind(this)
            this.createActivationToken = this.createActivationToken.bind(this)
            this.createAttestation = this.createAttestation.bind(this)
            this.createHarmonics = this.createHarmonics.bind(this)
            this.createVQCMetrics = this.createVQCMetrics.bind(this)
            this.generateArtifact = this.generateArtifact.bind(this)
            this.getBlockchainStatus = this.getBlockchainStatus.bind(this)
            this.getCurrentSystemMetrics = this.getCurrentSystemMetrics.bind(this)
            this.getHarmonics = this.getHarmonics.bind(this)
            this.getQuantumLedgerEntries = this.getQuantumLedgerEntries.bind(this)
            this.getQuantumLedgerEntry = this.getQuantumLedgerEntry.bind(this)
            this.getVQCMetrics = this.getVQCMetrics.bind(this)
            this.getVQCNetworkStatus = this.getVQCNetworkStatus.bind(this)
            this.initializeQuantumState = this.initializeQuantumState.bind(this)
            this.listActivationTokens = this.listActivationTokens.bind(this)
            this.listArtifacts = this.listArtifacts.bind(this)
            this.listAttestations = this.listAttestations.bind(this)
            this.mintArtifactAsNFT = this.mintArtifactAsNFT.bind(this)
            this.publishAttestation = this.publishAttestation.bind(this)
            this.seedTempleData = this.seedTempleData.bind(this)
            this.startSystemMonitoring = this.startSystemMonitoring.bind(this)
            this.stopSystemMonitoring = this.stopSystemMonitoring.bind(this)
            this.synchronizeVQCNetwork = this.synchronizeVQCNetwork.bind(this)
            this.verifyAttestation = this.verifyAttestation.bind(this)
            this.verifyBlockchainRecord = this.verifyBlockchainRecord.bind(this)
            this.vqcDashboardStream = this.vqcDashboardStream.bind(this)
        }

        /**
         * Activates a token using YubiKey OTP and optional Shamir shares.
         */
        public async activateToken(params: RequestType<typeof api_temple_activation_activateToken>): Promise<ResponseType<typeof api_temple_activation_activateToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/temple/activation/activate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_activation_activateToken>
        }

        /**
         * Connects a new node to the VQC network.
         */
        public async connectVQCNode(params: RequestType<typeof api_temple_vqc_network_connectVQCNode>): Promise<ResponseType<typeof api_temple_vqc_network_connectVQCNode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/network/connect`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_network_connectVQCNode>
        }

        /**
         * Creates a new activation token with YubiKey and optional Shamir secret sharing.
         */
        public async createActivationToken(params: RequestType<typeof api_temple_activation_createActivationToken>): Promise<ResponseType<typeof api_temple_activation_createActivationToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/activation/token`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_activation_createActivationToken>
        }

        /**
         * Creates a new TPM attestation record.
         */
        public async createAttestation(params: RequestType<typeof api_temple_attestation_createAttestation>): Promise<ResponseType<typeof api_temple_attestation_createAttestation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/attestation`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_attestation_createAttestation>
        }

        /**
         * Creates new system harmonics data with musical patterns and laser sync.
         */
        public async createHarmonics(params: RequestType<typeof api_temple_harmonics_createHarmonics>): Promise<ResponseType<typeof api_temple_harmonics_createHarmonics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/harmonics`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_harmonics_createHarmonics>
        }

        /**
         * Records new VQC quantum cycle metrics.
         */
        public async createVQCMetrics(params: RequestType<typeof api_temple_vqc_metrics_createVQCMetrics>): Promise<ResponseType<typeof api_temple_vqc_metrics_createVQCMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/metrics`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_metrics_createVQCMetrics>
        }

        /**
         * Generates a unique ceremonial artifact based on quantum entropy.
         */
        public async generateArtifact(params: RequestType<typeof api_temple_ceremonial_generateArtifact>): Promise<ResponseType<typeof api_temple_ceremonial_generateArtifact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ceremonial/generate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_ceremonial_generateArtifact>
        }

        /**
         * Retrieves blockchain network status and published records count.
         */
        public async getBlockchainStatus(): Promise<ResponseType<typeof api_temple_blockchain_getBlockchainStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_blockchain_getBlockchainStatus>
        }

        /**
         * Gets current system metrics without storing them
         */
        public async getCurrentSystemMetrics(): Promise<ResponseType<typeof api_temple_system_monitor_getCurrentSystemMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/monitor/current`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_system_monitor_getCurrentSystemMetrics>
        }

        /**
         * Retrieves system harmonics data.
         */
        public async getHarmonics(): Promise<ResponseType<typeof api_temple_harmonics_getHarmonics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/harmonics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_harmonics_getHarmonics>
        }

        /**
         * Retrieves entries from the public quantum chain ledger.
         */
        public async getQuantumLedgerEntries(params: RequestType<typeof api_temple_ledger_getQuantumLedgerEntries>): Promise<ResponseType<typeof api_temple_ledger_getQuantumLedgerEntries>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
                page:  params.page === undefined ? undefined : String(params.page),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ledger/quantum`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_ledger_getQuantumLedgerEntries>
        }

        /**
         * Retrieves a single entry from the public quantum chain ledger.
         */
        public async getQuantumLedgerEntry(params: { id: number }): Promise<ResponseType<typeof api_temple_ledger_getQuantumLedgerEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ledger/quantum/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_ledger_getQuantumLedgerEntry>
        }

        /**
         * Retrieves the latest VQC quantum cycle metrics.
         */
        public async getVQCMetrics(): Promise<ResponseType<typeof api_temple_vqc_metrics_getVQCMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/metrics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_metrics_getVQCMetrics>
        }

        /**
         * Retrieves VQC network status and connected nodes.
         */
        public async getVQCNetworkStatus(): Promise<ResponseType<typeof api_temple_vqc_network_getVQCNetworkStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/network/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_network_getVQCNetworkStatus>
        }

        /**
         * Initializes quantum state for a VQC node.
         */
        public async initializeQuantumState(params: RequestType<typeof api_temple_vqc_network_initializeQuantumState>): Promise<ResponseType<typeof api_temple_vqc_network_initializeQuantumState>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/network/quantum/init`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_network_initializeQuantumState>
        }

        /**
         * Retrieves all activation tokens.
         */
        public async listActivationTokens(): Promise<ResponseType<typeof api_temple_activation_listActivationTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/activation/tokens`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_activation_listActivationTokens>
        }

        /**
         * Retrieves all ceremonial artifacts.
         */
        public async listArtifacts(): Promise<ResponseType<typeof api_temple_ceremonial_listArtifacts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ceremonial/artifacts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_ceremonial_listArtifacts>
        }

        /**
         * Retrieves all attestation records.
         */
        public async listAttestations(): Promise<ResponseType<typeof api_temple_attestation_listAttestations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/attestation`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_attestation_listAttestations>
        }

        /**
         * Mints a ceremonial artifact as an NFT.
         */
        public async mintArtifactAsNFT(params: RequestType<typeof api_temple_ceremonial_mintArtifactAsNFT>): Promise<ResponseType<typeof api_temple_ceremonial_mintArtifactAsNFT>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ceremonial/mint`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_ceremonial_mintArtifactAsNFT>
        }

        /**
         * Publishes VQC attestation record to blockchain for immutable registry.
         */
        public async publishAttestation(params: RequestType<typeof api_temple_blockchain_publishAttestation>): Promise<ResponseType<typeof api_temple_blockchain_publishAttestation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/publish`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_blockchain_publishAttestation>
        }

        /**
         * API endpoint to trigger data seeding for the temple service
         */
        public async seedTempleData(): Promise<ResponseType<typeof api_temple_data_seeder_seedTempleData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/seed-temple`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_data_seeder_seedTempleData>
        }

        /**
         * Starts the background system monitoring service
         */
        public async startSystemMonitoring(params: RequestType<typeof api_temple_system_monitor_startSystemMonitoring>): Promise<ResponseType<typeof api_temple_system_monitor_startSystemMonitoring>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/monitor/start`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_system_monitor_startSystemMonitoring>
        }

        /**
         * Stops the background system monitoring service
         */
        public async stopSystemMonitoring(): Promise<ResponseType<typeof api_temple_system_monitor_stopSystemMonitoring>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/monitor/stop`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_system_monitor_stopSystemMonitoring>
        }

        /**
         * Synchronizes the VQC network state across all nodes.
         */
        public async synchronizeVQCNetwork(params: RequestType<typeof api_temple_vqc_network_synchronizeVQCNetwork>): Promise<ResponseType<typeof api_temple_vqc_network_synchronizeVQCNetwork>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/vqc/network/sync`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_vqc_network_synchronizeVQCNetwork>
        }

        /**
         * Verifies a TPM attestation record against canonical values.
         */
        public async verifyAttestation(params: { id: number }): Promise<ResponseType<typeof api_temple_attestation_verifyAttestation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/attestation/${encodeURIComponent(params.id)}/verify`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_attestation_verifyAttestation>
        }

        /**
         * Verifies a blockchain transaction for VQC attestation.
         */
        public async verifyBlockchainRecord(params: RequestType<typeof api_temple_blockchain_verifyBlockchainRecord>): Promise<ResponseType<typeof api_temple_blockchain_verifyBlockchainRecord>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blockchain/verify`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_temple_blockchain_verifyBlockchainRecord>
        }

        /**
         * Real-time VQC dashboard data stream.
         */
        public async vqcDashboardStream(params: RequestType<typeof api_temple_websocket_vqcDashboardStream>): Promise<StreamIn<StreamResponse<typeof api_temple_websocket_vqcDashboardStream>>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                clientId:      params.clientId,
                subscriptions: params.subscriptions.map((v) => v),
            })

            return await this.baseClient.createStreamIn(`/stream/dashboard`, {query})
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.6)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
